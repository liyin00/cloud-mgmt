# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      # - staging 

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: clae   # Add your cluster name here.
  GKE_ZONE: asia-southeast1   # Add your cluster zone here.

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
  

    # Build the Docker images
    - name: Build
      run: |-
        touch .env
        echo PASSWORD=${{ secrets.GKE_SQL_USER_PW }} >> .env
        echo PUBLIC_IP_ADDRESS=${{secrets.CLOUD_SQL_IP}} >> .env
        echo DBNAME=${{secrets.GKE_SQL_NAME}} >> .env
        echo PROJECT_ID=${{ secrets.GKE_PROJECT }} >> .env
        echo INSTANCE_NAME=${{secrets.CLOUD_SQL_INSTANCE_NAME}} >> .env
        echo TYPE=${{secrets.TYPE}} >> .env
        echo PROJECT_ID=${{secrets.PROJECT_ID}} >> .env
        echo PRIVATE_KEY_ID=${{secrets.PRIVATE_KEY_ID}} >> .env
        echo PRIVATE_KEY=${{secrets.PRIVATE_KEY}} >> .env
        echo CLIENT_EMAIL=${{secrets.CLIENT_EMAIL}} >> .env
        echo CLIENT_ID=${{secrets.CLIENT_ID}} >> .env
        echo AUTH_URI=${{secrets.AUTH_URI}} >> .env
        echo TOKEN_URI=${{secrets.TOKEN_URI}} >> .env
        echo AUTH_PROVIDER_X509_CERT_URL=${{secrets.AUTH_PROVIDER_X509_CERT_URL}} >> .env
        echo CLIENT_X509_CERT_URL=${{secrets.CLIENT_X509_CERT_URL}} >> .env
        cat .env
        docker-compose --env-file ./.env -f ./docker-compose.yml build           

    # Push the Docker images to Google Container Registry
    - name: Publish
      run: |-
        gcloud docker -- push gcr.io/$PROJECT_ID/users:v1
        gcloud docker -- push gcr.io/$PROJECT_ID/product:v1
        
    # # Authentication to DB
    # - name: Authentication 
    #   run: |-
    #     touch key.json
    #     echo credentials=${{ secrets.GKE_SA_KEY }} >> key.json
    #     kubectl create secret generic sasecret --from-file=service_acc.json=~/key.json}}
    # Deploy the Docker images to the GKE cluster

    - name: Deploy
      run: |-
        kubectl apply -f ./gke_config/users.yaml -f ./gke_config/users-service.yaml -f ./gke_config/product.yaml -f ./gke_config/product-service.yaml
        kubectl get deployment/product -o yaml
        kubectl rollout status deployment/useless
        kubectl rollout status deployment/users
        kubectl rollout status deployment/product
        kubectl get services -o wide